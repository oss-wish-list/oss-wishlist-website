name: Run OSS Wishlist Analyzer (manual)

on:
  workflow_dispatch:
    inputs:
      generate-sbom:
        description: "Generate SBOM before analysis"
        type: boolean
        default: true
      sbom-format:
        description: "SBOM format to generate (if generating)"
        type: choice
        options:
          - spdx-json
          - cyclonedx-json
        default: spdx-json
      sbom-path:
        description: "Path to SBOM file to analyze"
        type: string
        default: sbom.json
      include-bigtech-backed:
        description: "Include dependencies whose maintainers use Big Tech email domains"
        type: boolean
        default: false
      filter-scorecard:
        description: "Filter by OpenSSF Scorecard score range"
        type: boolean
        default: false
      scorecard-min:
        description: "Min Scorecard score (0.0 - 10.0)"
        type: string
        default: "7.0"
      scorecard-max:
        description: "Max Scorecard score (0.0 - 10.0)"
        type: string
        default: "10.0"
      filter-criticality:
        description: "Filter by OpenSSF Criticality score range (if available)"
        type: boolean
        default: false
      criticality-min:
        description: "Min Criticality score (0.0 - 1.0)"
        type: string
        default: "0.70"
      criticality-max:
        description: "Max Criticality score (0.0 - 1.0)"
        type: string
        default: "1.0"

permissions:
  contents: read

jobs:
  analyze-dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Optionally generate an SBOM if you don't already have one
      - name: Generate SBOM
        if: ${{ inputs.generate-sbom }}
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: ${{ inputs.sbom-format }}
          output-file: ${{ inputs.sbom-path }}

      - name: Summarize SBOM
        if: ${{ inputs.generate-sbom }}
        run: |
          {
            echo "## SBOM Summary";
            echo;
            echo "- Format: ${{ inputs.sbom-format }}";
            echo "- File: ${{ inputs.sbom-path }}";
            COUNT=$(jq 'if has("components") then (.components|length) else (.packages|length) end' "${{ inputs.sbom-path }}" 2>/dev/null || echo 0);
            echo "- Component count: ${COUNT}";
            UNIQUE_PURLS=$(jq -r 'if has("components") then [.components[]?.purl] else [.packages[]?.externalRefs[]? | select(.referenceType=="purl") | .referenceLocator] end | map(select(.!=null)) | unique | length' "${{ inputs.sbom-path }}" 2>/dev/null || echo 0);
            echo "- Unique PURLs: ${UNIQUE_PURLS}";
            echo;
            echo "Note: Transitive coverage depends on lockfiles or scanning built artifacts. For Node, ensure package-lock.json/yarn.lock are present; for Python, use Poetry.lock/pip-compile or scan an image/venv.";
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload SBOM artifact
        if: ${{ inputs.generate-sbom }}
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: ${{ inputs.sbom-path }}
          retention-days: 7

      - name: Run OSS Wishlist Analyzer
        id: analyze
        uses: oss-wishlist/oss-wishlist-dependency-report@main
        with:
          sbom-path: ${{ inputs.sbom-path }}
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-pr: 'false'
          create-issue: 'false'
          include-bigtech-backed: ${{ inputs.include-bigtech-backed }}
          filter-scorecard: ${{ inputs.filter-scorecard }}
          scorecard-min: ${{ inputs.scorecard-min }}
          scorecard-max: ${{ inputs.scorecard-max }}
          filter-criticality: ${{ inputs.filter-criticality }}
          criticality-min: ${{ inputs.criticality-min }}
          criticality-max: ${{ inputs.criticality-max }}

      - name: Add report to job summary
        if: always()
        run: |
          {
            echo "## OSS Wishlist Analysis";
            echo;
            echo "- Dependencies with wishlists: ${{ steps.analyze.outputs.with-wishlist-count }}";
            echo "- Without maintainer Big Tech email alias: ${{ steps.analyze.outputs.without-backing-count }}";
            echo "- Report file: oss-wishlist-report.md (also attached as artifact 'oss-analysis-report')";
            echo;
            echo "<details><summary>Report preview (first 400 lines)</summary>";
            echo;
            echo '```markdown';
            head -n 400 oss-wishlist-report.md || true;
            echo '```';
            echo;
            echo "</details>";
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload analysis report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: oss-analysis-report
          path: oss-wishlist-report.md
          retention-days: 30
