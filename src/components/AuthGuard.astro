/**
 * Astro Server-Side Authentication Guard
 * 
 * Use this component in .astro files to protect pages with server-side auth
 * This runs during SSR, so users never see protected content without being authenticated
 * 
 * @example Basic usage:
 * ---
 * import AuthGuard from '../components/AuthGuard.astro';
 * ---
 * <AuthGuard>
 *   <h1>Protected Content</h1>
 * </AuthGuard>
 * 
 * @example Custom redirect:
 * <AuthGuard redirectTo="/login">
 *   <ProtectedContent />
 * </AuthGuard>
 * 
 * @example With session data:
 * ---
 * import AuthGuard from '../components/AuthGuard.astro';
 * import { getSession } from '../lib/auth';
 * 
 * const session = getSession(Astro.cookies);
 * ---
 * <AuthGuard>
 *   <h1>Welcome, {session.user.name}!</h1>
 * </AuthGuard>
 */

import { getSession } from '../lib/auth';
import { getBasePath } from '../lib/paths';

interface Props {
  /**
   * Where to redirect if user is not authenticated
   * @default '/'
   */
  redirectTo?: string;
  
  /**
   * Content to render if authenticated
   */
  children?: any;
}

const { redirectTo = '/' } = Astro.props;

// Check authentication
const session = getSession(Astro.cookies);

// If not authenticated, redirect
if (!session) {
  const basePath = getBasePath();
  const redirectUrl = redirectTo.startsWith('/') ? `${basePath}${redirectTo}`.replace('//', '/') : redirectTo;
  return Astro.redirect(redirectUrl);
}

// User is authenticated, render children
---

<slot />
