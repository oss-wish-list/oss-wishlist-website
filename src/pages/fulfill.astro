---
import Layout from '../components/Layout.astro';
import { getCollection } from 'astro:content';
import { GITHUB_CONFIG } from '../config/github.js';
import { getBasePath } from '../lib/paths';

const basePath = getBasePath();
const GITHUB_TOKEN = import.meta.env.GITHUB_TOKEN;

// Get practitioners for the dropdown
const practitioners = await getCollection('practitioners');

// Get services for detailed display
const services = await getCollection('services');

// Create a lookup map for services by title
const servicesByTitle = services.reduce((acc, service) => {
  acc[service.data.title] = service;
  return acc;
}, {});

// Try to get URL parameters
const url = Astro.url;
let wishlistData = null;
let issueNumber = null;
let githubIssue = null;

// Check for issue parameter (GitHub issue number)
issueNumber = url.searchParams.get('issue');

if (issueNumber && GITHUB_TOKEN) {
  try {
    // Fetch the GitHub issue data
    const response = await fetch(
      `${GITHUB_CONFIG.API_ISSUES_URL}/${issueNumber}`,
      {
        headers: {
          'Authorization': `token ${GITHUB_TOKEN}`,
          'Accept': 'application/vnd.github.v3+json',
        },
      }
    );

    if (response.ok) {
      githubIssue = await response.json();
      
      // Parse the issue body to extract wishes/services
      const body = githubIssue.body || '';
      const wishes: string[] = [];
      const lines = body.split('\n');
      
      let inServicesSection = false;
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        
        if (line === '## Services Requested' || line.includes('Services Requested')) {
          inServicesSection = true;
          continue;
        }
        
        // Stop if we hit another section
        if (inServicesSection && (line.startsWith('##') || line.startsWith('---'))) {
          break;
        }
        
        // Parse service items
        if (inServicesSection && line.startsWith('- ')) {
          const service = line
            .replace(/^-\s*(\[\s*[x\s]?\s*\])?\s*/, '')
            .trim();
          if (service) {
            wishes.push(service);
          }
        }
      }
      
      // Extract project name from title or body
      let projectName = githubIssue.title.replace(/^Wishlist:\s*/i, '').trim();
      
      // Extract open_to_sponsorship flag from issue body
      let openToSponsorship = false;
      const sponsorshipMatch = body.match(/Open to (Sponsorship|Honorarium):\*\*\s*(Yes|No)/i);
      if (sponsorshipMatch && sponsorshipMatch[2].toLowerCase() === 'yes') {
        openToSponsorship = true;
      }
      
      wishlistData = {
        issueNumber: githubIssue.number,
        projectName: projectName,
        wishes: wishes,
        url: githubIssue.html_url,
        maintainer: githubIssue.user.login,
        openToSponsorship: openToSponsorship
      };
    }
  } catch (error) {
    console.error('Error fetching GitHub issue:', error);
  }
}
---

<Layout title="Fulfill a Wishlist">
  <!-- Hero Section -->
  <section class="py-16 bg-gray-50">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="text-center mb-12">
        <h1 class="text-5xl font-bold text-gray-900 mb-6">
          Fulfill an <span class="text-gray-600">Open Source Wishlist</span>
        </h1>
        <p class="text-xl text-gray-600 max-w-3xl mx-auto">
          Thank you for your interest in supporting open source projects. Please fill out this form to begin the fulfillment process for a wishlist.
        </p>
      </div>

      <!-- Form Section -->
      <div class="bg-white rounded-lg shadow-sm border p-8">
        <form class="space-y-6" method="POST" action={`${basePath}api/fulfill-wishlist`}>
          <!-- Wishlist Selection -->
          <div>
            <label for="wishlist" class="block text-sm font-medium text-gray-700 mb-2">
              Wishlist to Fulfill:
            </label>
            {wishlistData ? (
              <>
                <input 
                  type="text" 
                  id="wishlist" 
                  name="wishlist-display" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 bg-gray-50"
                  value={`${wishlistData.projectName} (Issue #${wishlistData.issueNumber})`}
                  readonly
                />
                <input type="hidden" name="issue-number" value={wishlistData.issueNumber} />
                <input type="hidden" name="project-name" value={wishlistData.projectName} />
                <input type="hidden" name="github-url" value={wishlistData.url} />
                <input type="hidden" name="maintainer" value={wishlistData.maintainer} />
              </>
            ) : (
              <div class="bg-red-50 border border-red-200 rounded-md p-4">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div class="ml-3">
                    <h3 class="text-sm font-medium text-red-800">
                      Invalid Access
                    </h3>
                    <div class="mt-2 text-sm text-red-700">
                      <p>This page can only be accessed by clicking "Fulfill This Wish" from a specific wishlist.</p>
                      <p class="mt-2">
                        <a href="/oss-wishlist-website/wishlists" class="font-medium underline hover:text-red-600">
                          Go to Wishlists page to select a wishlist to fulfill
                        </a>
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          <!-- Items to Fund (Wishes) -->
          {wishlistData && wishlistData.wishes && wishlistData.wishes.length > 0 && (
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-3">
                Which specific wishes do you want to fulfill? <span class="text-red-600">*</span>
              </label>
              <div class="space-y-3 mb-4">
                <p class="text-sm text-green-700 mb-4">
                  <strong>Wishes available for fulfillment</strong> from <strong>{wishlistData.projectName}</strong>:
                </p>
                {wishlistData.wishes.map((serviceName: string) => {
                  const serviceDetails = servicesByTitle[serviceName];
                  return (
                    <div class="border border-gray-200 rounded-lg p-4 hover:border-gray-300 transition-colors">
                      <div class="flex items-start">
                        <input 
                          type="checkbox" 
                          id={`service-${serviceName.replace(/\s+/g, '-').toLowerCase()}`}
                          name="funded-services" 
                          value={serviceName}
                          class="mt-1 mr-3 h-4 w-4 text-gray-600 focus:ring-gray-500 border-gray-300 rounded funded-service-checkbox"
                        />
                        <div class="flex-1">
                          <label 
                            for={`service-${serviceName.replace(/\s+/g, '-').toLowerCase()}`}
                            class="block text-sm font-medium text-gray-900 cursor-pointer"
                          >
                            {serviceName}
                          </label>
                          {serviceDetails && (
                            <div class="mt-2 space-y-1">
                              <p class="text-sm text-gray-600">
                                {serviceDetails.data.description}
                              </p>
                              <div class="flex flex-wrap gap-4 text-xs text-gray-500">
                                {serviceDetails.data.service_type && (
                                  <span><strong>Type:</strong> {serviceDetails.data.service_type}</span>
                                )}
                                {serviceDetails.data.prerequisites && (
                                  <span><strong>Prerequisites:</strong> {serviceDetails.data.prerequisites}</span>
                                )}
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          )}

          <!-- Additional Items -->
          <div>
            <label for="additional-items" class="block text-sm font-medium text-gray-600 mb-2">
              Additional items or notes (optional):
            </label>
            <textarea 
              id="additional-items" 
              name="additional-items" 
              rows="3" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"
              placeholder="Any additional items, requirements, or special notes..."
            ></textarea>
          </div>

          <!-- Practitioner Selection -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-3">
              Practitioner Selection <span class="text-red-600">*</span>
            </label>
            <div class="space-y-3">
              <div>
                <input 
                  type="radio" 
                  id="select-practitioner" 
                  name="practitioner-choice" 
                  value="select" 
                  class="mr-2"
                  required
                />
                <label for="select-practitioner" class="text-sm text-gray-700">
                  Select from our recommended practitioners
                </label>
              </div>
              <div class="ml-6" id="practitioner-dropdown" style="display: none;">
                <label for="practitioner-select" class="block text-sm font-medium text-gray-600 mb-2">
                  Choose an practitioner:
                </label>
                <select 
                  id="practitioner-select"
                  name="selected-practitioner" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"
                >
                  <option value="">Select an practitioner...</option>
                  {practitioners.map(practitioner => (
                    <option value={practitioner.slug}>
                      {practitioner.data.name} - {practitioner.data.title} ({practitioner.data.specialties?.join(', ') || 'Multiple specialties'})
                    </option>
                  ))}
                </select>
                <div id="practitioner-info" class="mt-3 p-3 bg-gray-50 rounded-md" style="display: none;">
                  <div id="practitioner-details"></div>
                </div>
              </div>
              
              <div>
                <input 
                  type="radio" 
                  id="provide-practitioner" 
                  name="practitioner-choice" 
                  value="provide" 
                  class="mr-2"
                />
                <label for="provide-practitioner" class="text-sm text-gray-700">
                  I will provide my own practitioner
                </label>
              </div>
              <div class="ml-6" id="custom-practitioner" style="display: none;">
                <input 
                  type="text" 
                  name="custom-practitioner-name" 
                  placeholder="Practitioner name and contact information"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 mb-4"
                />
                
                <!-- Process Agreement (only for custom practitioner) -->
                <div class="bg-blue-50 border border-blue-200 p-4 rounded-md">
                  <div class="flex items-start">
                    <input 
                      type="checkbox" 
                      id="process-agreement" 
                      name="process-agreement" 
                      class="mt-1 mr-3"
                      required
                    />
                    <label for="process-agreement" class="text-sm text-gray-700">
                      <strong>Process Agreement:</strong> I understand and agree to follow the OSS Wishlist process for fulfilling and reporting on wishes. This includes regular progress updates, adherence to project timelines, and completion reports upon project delivery.
                    </label>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Timeline -->
          <div>
            <label for="timeline" class="block text-sm font-medium text-gray-600 mb-2">
              Proposed Timeline (optional)
            </label>
            <input 
              type="text" 
              id="timeline" 
              name="timeline" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"
              placeholder="e.g., 3 months, Q2 2024, etc."
            />
          </div>

          <!-- Optional Honorarium (only show if maintainer opted in) -->
          {wishlistData && wishlistData.openToSponsorship && (
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-6">
              <div class="flex items-start">
                <input 
                  type="checkbox" 
                  id="include-sponsorship" 
                  name="include-sponsorship"
                  value="yes"
                  class="mt-1 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <div class="ml-3">
                  <label for="include-sponsorship" class="block text-sm font-medium text-gray-900">
                    I would like to provide a one-time honorarium to the maintainer
                  </label>
                  <p class="text-xs text-gray-600 mt-1">
                    An honorarium recognizes the maintainer's time and collaboration during wish fulfillment. This is not payment for services or an obligation, but a gesture of appreciation.
                  </p>
                </div>
              </div>
            </div>
          )}

          <!-- Contact Information -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="contact-person" class="block text-sm font-medium text-gray-700 mb-2">
                Contact Person <span class="text-red-600">*</span>
              </label>
              <input 
                type="text" 
                id="contact-person" 
                name="contact-person" 
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"
                required
              />
            </div>
            
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
                Email Address <span class="text-red-600">*</span>
              </label>
              <input 
                type="email" 
                id="email" 
                name="email" 
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"
                required
              />
            </div>
          </div>

          <!-- Company -->
          <div>
            <label for="company" class="block text-sm font-medium text-gray-700 mb-2">
              Company/Organization <span class="text-red-600">*</span>
            </label>
            <input 
              type="text" 
              id="company" 
              name="company" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"
              required
            />
          </div>

          <!-- Reason for Fulfillment -->
          <div>
            <label for="reason" class="block text-sm font-medium text-gray-700 mb-2">
              Reason for Fulfillment <span class="text-red-600">*</span>
            </label>
            <textarea 
              id="reason" 
              name="reason" 
              rows="4" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"
              placeholder="Please describe why you want to fulfill this wishlist and how it aligns with your goals..."
              required
            ></textarea>
          </div>

          <!-- Submit Button -->
          {wishlistData && (
            <div class="pt-6">
              <button 
                type="submit" 
                class="w-full bg-gray-600 text-white px-6 py-3 rounded-md font-medium hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors"
              >
                Submit Fulfillment Request
              </button>
            </div>
          )}
        </form>
      </div>
    </div>
  </section>

  <script define:vars={{ 
    practitionerData: practitioners.reduce((acc, practitioner) => {
      acc[practitioner.slug] = {
        name: practitioner.data.name,
        title: practitioner.data.title,
        bio: practitioner.data.bio,
        specialties: practitioner.data.specialties || [],
        location: practitioner.data.location || 'Not specified',
        languages: practitioner.data.languages || []
      };
      return acc;
    }, {})
  }}>
    // Show/hide practitioner selection fields based on radio button selection
    const selectPractitionerRadio = document.getElementById('select-practitioner');
    const providePractitionerRadio = document.getElementById('provide-practitioner');
    const practitionerDropdown = document.getElementById('practitioner-dropdown');
    const customPractitioner = document.getElementById('custom-practitioner');
    const practitionerSelect = document.getElementById('practitioner-select');
    const practitionerInfo = document.getElementById('practitioner-info');
    const practitionerDetails = document.getElementById('practitioner-details');

    function togglePractitionerFields() {
      const processAgreement = document.getElementById('process-agreement');
      
      if (selectPractitionerRadio.checked) {
        practitionerDropdown.style.display = 'block';
        customPractitioner.style.display = 'none';
        practitionerInfo.style.display = 'none';
        document.querySelector('select[name="selected-practitioner"]').required = true;
        document.querySelector('input[name="custom-practitioner-name"]').required = false;
        processAgreement.required = false;
      } else if (providePractitionerRadio.checked) {
        practitionerDropdown.style.display = 'none';
        customPractitioner.style.display = 'block';
        practitionerInfo.style.display = 'none';
        document.querySelector('select[name="selected-practitioner"]').required = false;
        document.querySelector('input[name="custom-practitioner-name"]').required = true;
        processAgreement.required = true;
      }
    }

    // Show practitioner details when selected
    function showPractitionerDetails() {
      const selectedPractitioner = practitionerSelect.value;
      if (selectedPractitioner && practitionerData[selectedPractitioner]) {
        const practitioner = practitionerData[selectedPractitioner];
        practitionerDetails.innerHTML = `
          <div class="flex items-start space-x-3">
            <div class="flex-1">
              <h4 class="font-medium text-gray-900">${practitioner.name}</h4>
              <p class="text-sm text-gray-600 mb-2">${practitioner.title}</p>
              <p class="text-sm text-gray-700 mb-2">${practitioner.bio}</p>
              <div class="flex flex-wrap gap-4 text-xs text-gray-500 mb-2">
                <span><strong>Specialties:</strong> ${practitioner.specialties.join(', ')}</span>
                <span><strong>Location:</strong> ${practitioner.location}</span>
                <span><strong>Languages:</strong> ${practitioner.languages.join(', ')}</span>
              </div>
            </div>
          </div>
        `;
        practitionerInfo.style.display = 'block';
        updatePricing();
      } else {
        practitionerInfo.style.display = 'none';
      }
    }

    selectPractitionerRadio.addEventListener('change', togglePractitionerFields);
    providePractitionerRadio.addEventListener('change', togglePractitionerFields);
    practitionerSelect.addEventListener('change', showPractitionerDetails);

    // Form validation to ensure at least one service is selected (if checkboxes are present)
    const form = document.querySelector('form');
    form.addEventListener('submit', function(e) {
      const serviceCheckboxes = document.querySelectorAll('input[name="funded-services"]');
      
      if (serviceCheckboxes.length > 0) {
        const checkedServices = document.querySelectorAll('input[name="funded-services"]:checked');
        if (checkedServices.length === 0) {
          e.preventDefault();
          alert('Please select at least one wish from the wishlist to fulfill.');
          return false;
        }
      }
    });
  </script>
</Layout>