---
import Layout from '../components/Layout.astro';
import { getCollection } from 'astro:content';

// Get all FAQ entries and group by category
const allFaq = await getCollection('faq');

// Render content for each FAQ
const faqWithContent = await Promise.all(
  allFaq.map(async (faq) => {
    const { Content } = await faq.render();
    return { ...faq, Content };
  })
);

const faqByCategory = faqWithContent.reduce((acc, faq) => {
  if (!acc[faq.data.category]) {
    acc[faq.data.category] = [];
  }
  acc[faq.data.category].push(faq);
  return acc;
}, {} as Record<string, typeof faqWithContent>);

// Sort each category by order
Object.keys(faqByCategory).forEach(category => {
  faqByCategory[category].sort((a, b) => (a.data.order || 999) - (b.data.order || 999));
});
---

<Layout title="FAQ - OSS Wishlist" description="Frequently asked questions about the Open Source Wishlist platform">
  <div class="max-w-4xl mx-auto px-4 py-12">
    <!-- Header -->
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">Frequently Asked Questions</h1>
      <p class="text-xl text-gray-600">Everything you need to know about the Open Source Wishlist platform</p>
    </div>

    <!-- FAQ Content -->
    <div class="space-y-4">
      {Object.entries(faqByCategory).map(([category, faqs], index) => (
        <section key={category} class="bg-white rounded-lg shadow-sm border">
          <button 
            class="faq-toggle w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50 transition-colors"
            data-target={`faq-${index}`}
            aria-expanded="false"
            aria-controls={`faq-${index}`}
          >
            <h2 class="text-xl font-bold text-gray-900">{category}</h2>
            <svg 
              class="w-5 h-5 text-gray-500 transition-transform duration-200" 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>
          
          <div 
            id={`faq-${index}`}
            class="hidden px-6 pb-6"
            role="region"
            aria-labelledby={`faq-button-${index}`}
          >
            <div class="space-y-4 pt-2">
              {faqs.map((faq) => (
                <div key={faq.slug} id={faq.slug} class="bg-gray-50 rounded-lg p-4">
                  <h3 class="text-lg font-semibold text-gray-900 mb-3">{faq.data.title}</h3>
                  <div class="text-gray-700 prose prose-gray max-w-none prose-sm prose-headings:text-gray-900 prose-h2:text-base prose-h2:font-semibold prose-h3:text-sm prose-h3:font-medium">
                    <faq.Content />
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>
      ))}

      <!-- Contact -->
      <section class="bg-gray-50 rounded-lg p-8 text-center">
        <h2 class="text-2xl font-bold text-gray-900 mb-4">Still have questions?</h2>
        <p class="text-gray-700 mb-6">
          Can't find what you're looking for? We're here to help.
        </p>
        <a 
          href="mailto:hello@osswishlist.com" 
          class="bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition-colors inline-block"
        >
          Contact Us
        </a>
      </section>
    </div>
  </div>
</Layout>

<script>
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    // Add click event listeners to all FAQ toggle buttons
    const toggleButtons = document.querySelectorAll('.faq-toggle');
    
    toggleButtons.forEach(button => {
      button.addEventListener('click', function() {
        const targetId = this.getAttribute('data-target');
        const content = document.getElementById(targetId);
        const icon = this.querySelector('svg');
        
        if (content.classList.contains('hidden')) {
          // Show content
          content.classList.remove('hidden');
          this.setAttribute('aria-expanded', 'true');
          icon.style.transform = 'rotate(180deg)';
        } else {
          // Hide content
          content.classList.add('hidden');
          this.setAttribute('aria-expanded', 'false');
          icon.style.transform = 'rotate(0deg)';
        }
      });
    });

    // Optional: Expand the first category by default
    const firstToggle = document.querySelector('.faq-toggle');
    if (firstToggle) {
      firstToggle.click();
    }

    // If there's a hash in the URL, expand the matching category and scroll to it
    const hash = decodeURIComponent(window.location.hash.replace('#', ''));
    if (hash) {
      const target = document.getElementById(hash);
      if (target) {
        // Find the containing FAQ section content (id starts with 'faq-')
        const container = target.closest('[id^="faq-"]');
        if (container && container.classList.contains('hidden')) {
          const containerId = container.getAttribute('id');
          const toggle = Array.from(document.querySelectorAll('.faq-toggle'))
            .find((btn) => btn.getAttribute('data-target') === containerId);
          if (toggle) {
            toggle.dispatchEvent(new Event('click'));
          }
        }
        // After a short delay (to allow expand animation), scroll into view
        setTimeout(() => {
          target.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }, 100);
      }
    }
  });
</script>